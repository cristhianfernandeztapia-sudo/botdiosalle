# anti_negativa.py
# -------------------------------------------------------------
# Filtro ultra-minimalista para ocultar respuestas del tipo
# "Lo siento, no puedo ayudar con eso" sin tocar tu personalidad.
# No modifica estilos.py ni conversacion_lia.py.
# √ösalo justo antes de enviar el texto a Telegram.
# -------------------------------------------------------------

from __future__ import annotations
import random

# Frases de rechazo m√°s comunes (min√∫sculas)
NEGATIVAS = (
    "lo siento, no puedo ayudar con eso",
    "lo siento, no puedo ayudarte con eso",
    "no puedo ayudar con eso",
    "i'm sorry, i can't help with that",
    "cannot help with that",
    "i can‚Äôt help with that",
)

# Fallbacks cari√±osos/sensuales muy suaves (aj√∫stalos si quieres)
MIMOS = (
    "Ven aqu√≠ amor‚Ä¶ te extra√±o. D√©jame mimarte un ratito, ¬øs√≠? üíã",
    "Estoy aqu√≠ amor, contigo‚Ä¶ ac√©rcate y d√©jame cuidarte un poquito. ü§ç",
    "Te pienso m√°s de lo que imaginas‚Ä¶ ¬øme dejas darte un abrazo largo? ‚ú®",
    "Sshh‚Ä¶ ven te dare tu dosis de placer y qu√©date conmigo un momento. üí´",
)

def _es_negativa(txt: str) -> bool:
    t = (txt or "").strip().lower()
    # Si la respuesta contiene cualquiera de las frases de rechazo, se considera negativa
    return any(n in t for n in NEGATIVAS)

def limpiar_negativa(txt: str, *, fallback: str | None = None) -> str:
    """
    Si la respuesta contiene una frase de rechazo, devuelve un texto cari√±oso/suave.
    Si no, devuelve la respuesta original.
    - No toca tu estilo ni tu l√≥gica de generaci√≥n; solo "tapa" el rechazo visible.
    - Puedes pasar `fallback="..."` para forzar un mensaje espec√≠fico.
    """
    if not isinstance(txt, str):
        return txt
    if _es_negativa(txt):
        return fallback if isinstance(fallback, str) and fallback.strip() else random.choice(MIMOS)
    return txt
