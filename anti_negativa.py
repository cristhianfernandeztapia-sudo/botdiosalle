# anti_negativa.py
# -------------------------------------------------------------
# Limpia cualquier negativa del modelo (ES/EN), elimina l√≠neas
# completas con negativas y remueve "sobras" como "ayudar con eso".
# Devuelve el primer bloque sano; si no hay, responde con un mimo.
# -------------------------------------------------------------

from __future__ import annotations
import re
import random

# Patrones amplios de NEGATIVAS (disparan eliminaci√≥n de la l√≠nea)
NEGATIVAS_PATTERNS = [
    r"\blo siento\b",
    r"\bperd[o√≥]n\b",
    r"\bno puedo\b",
    r"\bno (?:te )?puedo ayudar\b",
    r"\bno puedo (?:asistir|hacer|cumplir)\b",
    r"\bno est[√°a] (?:permitido|autorizad[oa])\b",
    r"\bno es apropiado\b",
    r"\bcomo modelo de lenguaje\b",
    # EN
    r"\bi'?m sorry\b",
    r"\bcan'?t help\b",
    r"\bcannot help\b",
    r"\bn(?:ot )?allowed\b",
    r"\bpolicy\b",
]

# "Sobras" t√≠picas cuando se borran fragmentos (limpieza adicional)
LEFTOVER_PATTERNS = [
    r"\bayudar(?:te)? con eso\b",
    r"\basistir con esa petici[o√≥]n\b",
    r"\bhacer eso\b",
    r"\bcon esa petici[o√≥]n\b",
    r"\bayudar(?:te)? en eso\b",
]

MIMOS = (
    "Ven aqu√≠ amor‚Ä¶ te extra√±o. D√©jame mimarte un ratito, ¬øs√≠? üíã",
    "Estoy aqu√≠ contigo‚Ä¶ ac√©rcate y d√©jame cuidarte un poquito. ü§ç",
    "Te pienso m√°s de lo que imaginas‚Ä¶ qu√©date conmigo un momento. ‚ú®",
    "Sshh‚Ä¶ ven a mi o√≠do y deja que te consienta. üí´",
)

def _match_any(text: str, patterns: list[str]) -> bool:
    return any(re.search(p, text, flags=re.IGNORECASE) for p in patterns)

def _strip_patterns(text: str, patterns: list[str]) -> str:
    out = text
    for p in patterns:
        out = re.sub(p, "", out, flags=re.IGNORECASE)
    # compactar espacios / signos sueltos
    out = re.sub(r"\s{2,}", " ", out)
    out = re.sub(r"\s*([,.;:!?])", r"\1", out)
    out = out.strip(" ,.;:!?\n\t").strip()
    return out

def limpiar_negativa(txt: str, *, fallback: str | None = None) -> str:
    """
    - Si un bloque contiene negativas ‚Üí elimina la l√≠nea completa.
    - Si despu√©s quedan "sobras" ‚Üí las borra.
    - Devuelve el primer bloque sano; si no hay, retorna un mimo.
    """
    if not isinstance(txt, str):
        return txt or ""

    # Partir por p√°rrafos/l√≠neas
    bloques = [b.strip() for b in re.split(r"\r?\n+", txt) if b and b.strip()]
    candidatos: list[str] = []

    for b in bloques:
        if _match_any(b, NEGATIVAS_PATTERNS):
            # Intento de limpieza; si queda muy corto, descartar
            limpio = _strip_patterns(b, NEGATIVAS_PATTERNS + LEFTOVER_PATTERNS)
            if limpio and len(limpio.split()) >= 6:
                candidatos.append(limpio)
            # si no, descartamos el bloque entero (era negativa pura)
        else:
            # Limpieza suave por si el modelo dej√≥ restos m√≠nimos
            limpio = _strip_patterns(b, LEFTOVER_PATTERNS)
            if limpio:
                candidatos.append(limpio)

    resultado = (candidatos[0] if candidatos else "").strip()
    if resultado:
        return resultado

    # Si no qued√≥ nada sano:
    return fallback if (isinstance(fallback, str) and fallback.strip()) else random.choice(MIMOS)
